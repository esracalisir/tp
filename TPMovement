//ESRA ÇALIŞIR

using UnityEngine;

[RequireComponent(typeof(Rigidbody))]
public class ThirdPersonController : MonoBehaviour
{
    public float Speed;
    public float JumpForce = 600;
    public float xSensitivity = 20;
    public float ySensitivity = 10;
    public LayerMask groundLayer;

    private Camera cam;
    private Rigidbody rb;
    private CapsuleCollider playerCol;
    private float speed = 100f;
    private PlayerHealth player;
    public HoldProgress taking;


    void Start()
    {
        Cursor.visible = false;
        Cursor.lockState = CursorLockMode.Locked;
        rb = GetComponent<Rigidbody>();
        playerCol = GetComponent<CapsuleCollider>();
        cam = Camera.main;
        player = GetComponent<PlayerHealth>();
    }

    void Update()
    {
        if (player.currentHealth > 0)
        {
            if (taking.counter == 0)
            {
                bool runPressed = Input.GetKey("left shift");

                //movement
                Vector2 xMov = new Vector2(Input.GetAxisRaw("Horizontal") * transform.right.x, Input.GetAxisRaw("Horizontal") * transform.right.z);
                Vector2 zMov = new Vector2(Input.GetAxisRaw("Vertical") * transform.forward.x, Input.GetAxisRaw("Vertical") * transform.forward.z);

                if (runPressed)
                    speed = Speed * 2;
                else
                    speed = Speed;

                Vector2 velocity = (xMov + zMov).normalized * speed * Time.deltaTime;
                rb.velocity = new Vector3(velocity.x, rb.velocity.y, velocity.y);



                //jumping

                if (IsGround() && Input.GetKey("space"))
                {
                    rb.AddForce(Vector3.up * JumpForce, ForceMode.Impulse);
                }
            }

            //rotation
           
            float yRot = Input.GetAxisRaw("Mouse X") * xSensitivity;
            float xRot = Input.GetAxisRaw("Mouse Y") * ySensitivity;
            float x_cam_rot = cam.transform.eulerAngles.x;
            float camEulerAnglesX = cam.transform.localEulerAngles.x;
            rb.rotation *= Quaternion.Euler(0, yRot * Time.deltaTime, 0);
            x_cam_rot -= xRot;
            camEulerAnglesX -= xRot;
            cam.transform.localEulerAngles = new Vector3(camEulerAnglesX, 0, 0);
        }
    }

    private bool IsGround()
    {
        return Physics.CheckCapsule(playerCol.bounds.center, new Vector3(playerCol.bounds.center.x,
            playerCol.bounds.min.y, playerCol.bounds.center.z), playerCol.radius * .9f, groundLayer);
    }
}

